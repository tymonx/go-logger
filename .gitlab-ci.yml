# Copyright 2020 Tymoteusz Blazejczyk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

.go-script: &go-script |-
    # Load common Go utilities

    function strip {
        # Strip variable from leading and trailing whitespaces
        echo "$1" | sed -r -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
    }

    function lower {
        # Replace all characters from upper case to lower case
        echo "$1" | tr '[:upper:]' '[:lower:]'
    }

    function url_cleanup {
        # URL cleanup. Removing double slashes
        echo "$1" | sed -E 's,([^:]/)/+,\1,g'
    }

    function is_true {
        # Check if contains true
        [[ $(lower "$1" | \
            grep -cE '^(on|yes|true|enable|[1-9][0-9]*)$') -ne 0 ]]
    }

    function is_git {
        # Is the git command available
        command -v git 2>&1 >/dev/null
    }

    function is_gcc {
        # Is the gcc command available
        command -v gcc 2>&1 >/dev/null
    }

    function is_curl {
        # Is the curl command available
        command -v curl 2>&1 >/dev/null
    }

    function is_wget {
        # Is the wget command available
        command -v wget 2>&1 >/dev/null && (wget --help 2>&1 | grep -q -e '--execute')
    }

    function is_golint {
        # Is the golint command available
        command -v golint 2>&1 >/dev/null
    }

    function is_godoc {
        # Is the godoc command available
        command -v godoc 2>&1 >/dev/null
    }

    function is_apk {
        # Is the apk command available
        command -v apk 2>&1 >/dev/null
    }

    function install_git {
        # Install the git command
        if ! is_git; then
            echo "The git command is missing. Installing the git command..."

            # Alpine image
            if is_apk; then
                apk update --no-cache
                apk add --no-cache git
            fi
        fi
    }

    function install_gcc {
        # Install the gcc command
        if ! is_gcc; then
            echo "The gcc command is missing. Installing the gcc command..."

            # Alpine image
            if is_apk; then
                apk update --no-cache
                apk add --no-cache gcc libc-dev
            fi
        fi
    }

    function install_curl {
        # Install the curl command
        if ! is_curl; then
            echo "The curl command is missing. Installing the curl command..."

            # Alpine image
            if is_apk; then
                apk update --no-cache
                apk add --no-cache curl
            fi
        fi
    }

    function install_wget {
        # Install the wget command
        if ! is_wget; then
            echo "The wget command is missing. Installing the wget command..."

            # Alpine image
            if is_apk; then
                apk update --no-cache
                apk add --no-cache wget
            fi
        fi
    }

    function install_golint {
        # Install the golint command
        if ! is_golint; then
            install_git

            echo "The golint command is missing. Installing the golint command..."
            go get -u golang.org/x/lint/golint
        fi
    }

    function install_godoc {
        # Install the godoc command
        if ! is_godoc; then
            install_git

            echo "The godoc command is missing. Installing the godoc command..."
            go get -u golang.org/x/tools/cmd/godoc
        fi
    }

    function create_redirect_html {
        # Creating html file with redirection
        local FILE
        local URL

        FILE="$1"
        URL="$2"

        if [[ ! -f "$FILE" ]]; then
            echo "Generating $FILE file..."

            # Create directory
            mkdir -p "$(basename $FILE)"

            # Removing duplicated slashes '/'
            URL=$(url_cleanup "$URL")

            # Creating html file with redirection
            cat <<-EOF > "$FILE"
    <!DOCTYPE HTML>
    <html lang="en-US">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="refresh" content="0; url=$URL">
            <script type="text/javascript">
                window.location.href = "$URL"
            </script>
            <title>Page Redirection</title>
        </head>
        <body>
            If you are not redirected automatically, follow this <a href='$URL'>link</a>.
        </body>
    </html>
    EOF
        fi
    }

    function go_format {
        # Go format
        local FILES

        echo "Checking if Go source files are formatted correctly..."
        FILES=$(gofmt -l ${GO_FORMAT_PATHS:-./})

        if [[ -z "$FILES" ]]; then
            echo "All Go source files are formatted correctly"
        else
            echo "Listing Go source files that are ill-formatted:"
            echo "$FILES"
            echo ""
            echo "Detailed formatting information:"
            echo "$(gofmt -l -e -d ${GO_FORMAT_PATHS:-./})"
            exit 1
        fi
    }

    function go_lint {
        # Go lint
        install_golint

        echo "Linting Go source files..."
        golint -set_exit_status ${GO_LINT_PATHS:-./...}
        echo "All Go source files are linted correctly"
    }

    function go_build {
        # Go build
        echo "Building Go source files..."
        go build ${GO_BUILD_PATHS:-./...}
        echo "All Go source files are built correctly"
    }

    function go_test {
        # Go test
        local COVERAGE

        install_gcc

        echo "Testing Go source files..."
        go test -v -cover -coverprofile=coverage.out ${GO_TEST_PATHS:-./...}
        echo "All Go source files are tested correctly"

        echo ""
        echo "Showing total coverage result:"
        go tool cover -func=coverage.out

        echo ""
        echo "Validating coverage threshold:"
        COVERAGE=$(go tool cover -func=coverage.out | grep "total:")
        COVERAGE=$(echo "$COVERAGE" | sed -n -E 's/^\s*total:\s*\(statements\)\s*([0-9]+\.[0-9]+)%\s*$/\1/p')

        echo "Coverage result: $(printf '%.1f' ${COVERAGE})%"
        echo "Coverage threshold: $(printf '%.1f' ${GO_COVERAGE})%"

        if [[ 0 -eq $(echo "${COVERAGE} < ${GO_COVERAGE}" | bc) ]]; then
            echo "Coverage passed"
        else
            echo "Coverage failed"
            exit 1
        fi
    }

    function go_doc {
        # Go doc
        local URL
        local PID
        local FILE
        local STATUS
        local MODULE

        install_curl
        install_wget
        install_godoc

        echo "Generating Go documentation..."

        # Setup
        rm -rf "$GO_DOC_OUTPUT"

        FILE=$(go env GOMOD)

        # Extract Go module name from a Go module file
        if [[ -f "$FILE" ]]; then
            MODULE=$(cat "$FILE" | sed -n -E 's/^\s*module\s+([[:graph:]]+)\s*$/\1/p')
        fi

        # URL path to Go package and module documentation
        URL=$(url_cleanup "http://$GO_DOC_HTTP/pkg/$MODULE/")

        # Starting godoc server
        godoc -http="$GO_DOC_HTTP" &
        PID=$!

        # Waiting for godoc server
        while ! curl --fail --silent "$URL" > /dev/null; do
            sleep 0.1
        done

        # Download all documentation content from running godoc server
        wget \
            --mirror \
            --recursive \
            --convert-links \
            --page-requisites \
            --adjust-extension \
            --execute=robots=off \
            --include-directories="/pkg,/lib" \
            --exclude-directories="*" \
            --directory-prefix="$GO_DOC_OUTPUT" \
            --no-host-directories \
            "$URL" || STATUS=$?

        # Stop godoc server
        kill -9 "$PID"

        # Check wget status code. The error code 8 is also valid
        if [[ $STATUS -ne 0 ]] && [[ $STATUS -ne 8 ]]; then
            exit "$STATUS"
        fi

        # Creating the index.html file with redirection to documentation page
        create_redirect_html \
            "$CI_PROJECT_DIR/public/index.html" \
            "$CI_PAGES_URL/$GO_DOC_PREFIX/pkg/$MODULE/$GO_DOC_PATH/"

        echo "Generated Go documentation"
    }

    if is_true "$GO_LINT_ENABLE"; then
        install_golint
    fi

    if is_true "$GO_TEST_ENABLE"; then
        install_gcc
    fi

    if is_true "$GO_DOC_ENABLE"; then
        install_curl
        install_wget
        install_godoc
    fi

    if is_true "$GO_FORMAT_ENABLE"; then
        GO_FORMAT_ENABLE=0

        go_format
    fi

    if is_true "$GO_LINT_ENABLE"; then
        GO_LINT_ENABLE=0

        go_lint
    fi

    if is_true "$GO_BUILD_ENABLE"; then
        GO_BUILD_ENABLE=0

        go_build
    fi

    if is_true "$GO_TEST_ENABLE"; then
        GO_TEST_ENABLE=0

        go_test
    fi

    if is_true "$GO_DOC_ENABLE"; then
        GO_DOC_ENABLE=0

        go_doc
    fi

.go-base:
    variables:
        GO_VERSION: "1.14.2"
        GO_ALPINE_VERSION: "3.11"
        GO_DOCKER_IMAGE: golang
        GO_DOCKER_TAG: ${GO_VERSION}-alpine${GO_ALPINE_VERSION}
        GO_FORMAT_ENABLE: 0
        GO_FORMAT_PATHS: ""
        GO_BUILD_ENABLE: 0
        GO_BUILD_PATHS: ""
        GO_LINT_ENABLE: 0
        GO_LINT_PATHS: ""
        GO_TEST_ENABLE: 0
        GO_TEST_PATHS: ""
        GO_DOC_ENABLE: 0
        GO_DOC_PREFIX: doc
        GO_DOC_OUTPUT: public/${GO_DOC_PREFIX}
        GO_DOC_PATH: ""
        GO_DOC_HTTP: "localhost:6060"
        GO_COVERAGE: 80
    image: ${GO_DOCKER_IMAGE}:${GO_DOCKER_TAG}
    before_script:
        - *go-script
    script:
        - *go-script

.go-build:
    extends: .go-base
    stage: build
    variables:
        GO_FORMAT_ENABLE: 1
        GO_BUILD_ENABLE: 1
        GO_LINT_ENABLE: 1

.go-test:
    extends: .go-base
    stage: test
    variables:
        GO_TEST_ENABLE: 1

.go-doc:
    extends: .go-base
    stage: deploy
    artifacts:
        paths:
            - public
    rules:
        - if: '$CI_COMMIT_TAG != null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
          when: always
        - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
          when: manual
    variables:
        GO_DOC_ENABLE: 1

build:
    extends: .go-build

test:
    extends: .go-test
    variables:
        GO_COVERAGE: 0

pages:
    extends: .go-doc
    variables:
        GO_DOC_PATH: logger
